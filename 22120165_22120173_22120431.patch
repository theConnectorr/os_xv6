diff --git a/.gitignore b/.gitignore
index b49f865..5c33438 100644
--- a/.gitignore
+++ b/.gitignore
@@ -23,4 +23,3 @@ ph
 barrier
 /lab-*.json
 .DS_Store
-.vscode
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index 487f4f2..a3c962b 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -173,7 +173,6 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
-void            vmprint(pagetable_t);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index 463d383..e18bbb6 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -128,10 +128,6 @@ exec(char *path, char **argv)
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
-  if (p->pid == 1) {
-    vmprint(p->pagetable);
-  }
-
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
index 4c57fa9..74d2fd4 100644
--- a/kernel/memlayout.h
+++ b/kernel/memlayout.h
@@ -70,10 +70,10 @@
 //   TRAPFRAME (p->trapframe, used by the trampoline)
 //   TRAMPOLINE (the same page as in the kernel)
 #define TRAPFRAME (TRAMPOLINE - PGSIZE)
-#define USYSCALL (TRAPFRAME - PGSIZE)
 #ifdef LAB_PGTBL
+#define USYSCALL (TRAPFRAME - PGSIZE)
+
 struct usyscall {
   int pid;  // Process ID
 };
-
 #endif
diff --git a/kernel/proc.c b/kernel/proc.c
index ea36535..58a8a0b 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -132,12 +132,6 @@ found:
     return 0;
   }
 
-  if((p->usyscall = (struct usyscall *)kalloc()) == 0){
-    freeproc(p);
-    release(&p->lock);
-    return 0;
-  }
-
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
   if(p->pagetable == 0){
@@ -151,9 +145,7 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
-#ifdef LAB_PGTBL
-  p->usyscall->pid = p->pid;
-#endif
+
   return p;
 }
 
@@ -163,15 +155,9 @@ found:
 static void
 freeproc(struct proc *p)
 {
-  if (p->usyscall) {
-    kfree((void*) p->usyscall);
-  }
-  p->usyscall = 0;
-
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
@@ -197,14 +183,6 @@ proc_pagetable(struct proc *p)
   if(pagetable == 0)
     return 0;
 
-  if(mappages(pagetable, USYSCALL, PGSIZE,
-              (uint64)(p->usyscall), PTE_R | PTE_U) < 0){
-    uvmunmap(pagetable, TRAPFRAME, 1, 0);
-    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-    uvmfree(pagetable, 0);
-    return 0;
-  }
-
   // map the trampoline code (for system call return)
   // at the highest user virtual address.
   // only the supervisor uses it, on the way
@@ -232,7 +210,6 @@ proc_pagetable(struct proc *p)
 void
 proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
-  uvmunmap(pagetable, USYSCALL, 1, 0);
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
   uvmfree(pagetable, sz);
diff --git a/kernel/proc.h b/kernel/proc.h
index ad8e1af..d021857 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -99,7 +99,6 @@ struct proc {
   uint64 kstack;               // Virtual address of kernel stack
   uint64 sz;                   // Size of process memory (bytes)
   pagetable_t pagetable;       // User page table
-  struct usyscall* usyscall;
   struct trapframe *trapframe; // data page for trampoline.S
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 100895e..20a01db 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,7 +343,6 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
-#define PTE_A (1L << 6)
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 947f89b..88644b2 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -75,23 +75,6 @@ int
 sys_pgaccess(void)
 {
   // lab pgtbl: your code here.
-  uint64 addr, uaddr, bitmask = 0;
-  int pgnum;
-  argaddr(0, &addr);
-  argint(1, &pgnum);
-  argaddr(2, &uaddr);
-  
-  struct proc *p = myproc();
-  for(int i = 0; i < pgnum; i++) {
-    pte_t* pte = walk(p->pagetable, addr + i * PGSIZE, 0);
-    
-    if (*pte & PTE_A) {
-      bitmask |= (1 << i);
-      *pte &= (~PTE_A);
-    }
-  }
-
-  copyout(p->pagetable, uaddr, (char *)&bitmask, sizeof(bitmask));
   return 0;
 }
 #endif
diff --git a/kernel/vm.c b/kernel/vm.c
index ae05e2d..5c31e87 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -449,45 +449,3 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
-
-char* getlevel(int level) {
-  if (level == 0) {
-    return " ..";
-  }
-
-  if (level == 1) {
-    return " .. ..";
-  }
-
-  if (level == 2) {
-    return " .. .. ..";
-  }
-
-  return "";
-}
-
-void
-vmprint_rec(pagetable_t pagetable, int level) {
-  for (int i = 0; i < 512; i++) {
-    pte_t pte = (pte_t)pagetable[i];
-    uint64 child = PTE2PA(pte);
-
-    if (level > 2)
-      continue;
-
-    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){  
-      printf("%s%d: pte %p pa %p\n", getlevel(level), i, pte, child);
-      vmprint_rec((pagetable_t)child, level + 1);
-    } else if(pte & PTE_V){
-      printf("%s%d: pte %p pa %p\n", getlevel(level), i, pte, child);
-    }
-
-  }
-}
-
-void
-vmprint(pagetable_t pagetable) {
-  // your code here
-  printf("page table %p\n", pagetable);
-  vmprint_rec(pagetable, 0);
-}
\ No newline at end of file
